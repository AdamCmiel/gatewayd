#!/usr/bin/env node
const gateway = require('../');
const program = require('commander');
const requireAll = require('require-all-to-camel');
const cli = requireAll(__dirname+'/../lib/cli/');
const logger = require('winston');

process.env.DATABASE_URL = gateway.config.get('DATABASE_URL');

program
  .version('1.1.0')
  .option('-j, --json', 'json format');

program
  .command('start') 
  .description('start the gateway processes')
  .action(cli.startGateway);

program
  .command('stop') 
  .description('stop the gateway processes')
  .action(cli.stopGateway);

program
  .command('restart') 
  .description('restart the gateway processes')
  .action(cli.restartGateway);

program
  .command('get_key')
  .description('get the admin api key')
  .action(cli.getKey);

program
  .command('list_processes')
  .description('list the processes currently run by ripple-gateway')
  .action(cli.listProcesses);

program
  .command('list_incoming_payments')
  .description('list incoming ripple payments in the queue to be processed')
  .action(cli.listIncomingPayments);

program
  .command('list_cleared')
  .description('get cleared transactions')
  .action(cli.listCleared);

program
  .command('list_queued_withdrawals')
  .description('get queued withdrawals to external accounts')
  .action(cli.listQueuedWithdrawals);

program
  .command('clear_withdrawal <external_transaction_id>')
  .description('clear pending withdrawal to external account')
  .action(cli.clearWithdrawal);

program
  .command('record_deposit <amount> <currency> <external_account_id>')
  .description('record a deposit in the deposit processing queue')
  .action(cli.recordDeposit);

program
  .command('list_queued_deposits')
  .description('list deposits in the deposit processing queue')
  .action(cli.listQueuedDeposits);

program
  .command('list_outgoing_payments')
  .description('list the outgoing ripple payments.')
  .action(cli.listOutgoingPayments);

program
  .command('list_users')
  .description('list registered users')
  .action(cli.listUsers);

program
  .command('list_user_external_accounts <userId>')
  .description('list external accounts for a user')
  .action(cli.listUserExternalAccounts);

program
  .command('add_external_account <name> <userId>')
  .description('add an external account to a user')
  .action(cli.addExternalAccount);

program
  .command('register_user <username> <password> <ripple_address>')
  .description('create a user with a ripple address')
  .action(cli.registerUser);

program
  .command('activate_user')
  .description('enable a user to use the ripple gateway')
  .action(cli.activateUser);

program
  .command('deactivate_user <userId>')
  .description('disable a user from using the ripple gateway')
  .action(cli.deactivateUser);

program
  .command('list_failed_payments')
  .description('list outgoing ripple transactions that failed')
  .action(cli.listFailedPayments);

program
  .command('retry_failed_payment <ripple_transaction_id>')
  .description('retry an outgoing ripple transaction that failed')
  .action(cli.retryFailedPayment);

program.parse(process.argv);

